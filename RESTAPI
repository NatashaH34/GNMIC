import subprocess
import socket


class RESTAPI:
  """
  REST API handle
  Supports logging into the node and connecting to the node
  """

  # Login to the node

  def login(self):
    """
    Login to the node from collector
    Parse status information and log output
    Returns: True if successful, False if unsuccessful
    """
    loginCMD = f"/opt/tools/swtools/6500/nbitools/testrest login {self.device.sp_ip_address}"

    process = subprocess.run(
      loginCMD,
      stdout=subprocess.PIPE,
      stderr=subprocess.PIPE,
      shell=True,
      universal_newlines=True,
    )

    if process.returncode != 0:
      self.log.error("Login unsuccessful")
      if process.stderr:
        self.log.error(process.stderr)
      return False

    self.log.debug(process.stdout)
    self.log.info("Login successful")
    return True

  # Config on the node:

  def createTargetID(self):
    """
    Create a target-id of custom type
    Parse status information and log output
    Returns: True if successful, False if unsuccessful
    """
    targetidCMD = "/opt/tools/swtools/6500/nbitools/testrest put " \
                  "api/v1/datastore/grpc-tunnel/target-id/target_id_project_alpha '{\"components\":[\"custom\"]," \
                  "\"custom\":\"TARGET_ID_PROJECT_ALPHA\"}\'"

    process = subprocess.run(
      targetidCMD,
      stdout=subprocess.PIPE,
      stderr=subprocess.PIPE,
      shell=True,
      universal_newlines=True,
    )

    if process.returncode != 0:
      self.log.error("Target-id could not be created")
      if process.stderr:
        self.log.error(process.stderr)
      return False

    self.log.debug(process.stdout)
    self.log.info("Target-id created successfully")
    return True

  def createDestination(self, tunnel="secure", address="50066"):
    """
    Use the target-id to create a destination
    Parse status information and log output
    Returns: True if successful, False if unsuccessful
    Args:
      tunnel: either secure or insecure (string)
      address: port number (string)
    """

    createDestCMD = f"/opt/tools/swtools/6500/nbitools/testrest put " \
                    f"api/v1/datastore/grpc-tunnel/destination/{socket.gethostbyname(socket.gethostname())}," \
                    f"{address}/ '{{\"address\":{socket.gethostbyname(socket.gethostname())},\"port\":{address}," \
                    f"\"description\":\"Dialout1\",\"admin-state\":\"enable\",\"secure-tunnel\":{tunnel}," \
                    f"\"handler\":[{{\"target-id\":target_id_project_alpha\",\"target-type\":\"GNMI_GNOI\"," \
                    f"\"secure-service\":\"true\"}}]}}'"

    process = subprocess.run(
      createDestCMD,
      stdout=subprocess.PIPE,
      stderr=subprocess.PIPE,
      shell=True,
      universal_newlines=True,
    )

    if process.returncode != 0:
      self.log.error("Destination could not be created")
      if process.stderr:
        self.log.error(process.stderr)
      return False

    self.log.debug(process.stdout)
    self.log.info("Destination created successfully")
    return True
