import subprocess
import socket

class RESTAPI:
  """
  REST API handle
  Supports logging into the node and connecting to the node
  """

  # login to the node

  def login(self):
    """
    Login to the node from collector
    Parse status information and log output
    Called by connectRESTAPI()
    Returns: True if successful, False if unsuccessful
    """
    loginCMD = f"/opt/tools/swtools/6500/nbitools/testrest login {self.device.sp_ip_address}"

    process = subprocess.run(
      loginCMD,
      stdout=subprocess.PIPE,
      stderr=subprocess.PIPE,
      shell=True,
      universal_newlines=True,
    )

    if process.returncode != 0:
      self.log.error("Login unsuccessful")
      if process.stderr:
        self.log.error(process.stderr)
      return False
    
    self.log.debug(process.stdout)
    self.log.info("Login successful")
    return True


  # Config on the node:

  def createTargetID(self):
    """
    Create a target-id of custom type
    Parse status information and log output
    Called by connectRESTAPI()
    Returns: True if successful, False if unsuccessful
    """
    targetidCMD = "/opt/tools/swtools/6500/nbitools/testrest put api/v1/datastore/grpc-tunnel/target-id/target_id_project_alpha '{\"components\":[\"custom\"],\"custom\":\"TARGET_ID_PROJECT_ALPHA\"}\'"

    process = subprocess.run(
      targetidCMD,
      stdout=subprocess.PIPE,
      stderr=subprocess.PIPE,
      shell=True,
      universal_newlines=True,
    )

    if process.returncode != 0:
      self.log.error("Target-id could not be created")
      if process.stderr:
        self.log.error(process.stderr)
      return False
    
    self.log.debug(process.stdout)
    self.log.info("Target-id created successfully")
    return True

  def createDestination(self, tunnel="secure", port="50066"):
    """
    Use the target-id to create a destination
    Parse status information and log output
    Called by connectRESTAPI()
    Returns: True if successful, False if unsuccessful
    Args:
      tunnel: either secure or insecure (string)
    """

    createDestCMD = f"/opt/tools/swtools/6500/nbitools/testrest put api/v1/datastore/grpc-tunnel/destination/{socket.gethostbyname(socket.gethostname())},8443/ '{{\"address\":{socket.gethostbyname(socket.gethostname())},\"port\":{port},\"description\":\"Dialout1\",\"admin-state\":\"enable\",\"secure-tunnel\":{tunnel},\"handler\":[{{\"target-id\":\"target_id_project_alpha\",\"target-type\":\"GNMI_GNOI\",\"secure-service\":\"true\"}}]}}'"
    
    process = subprocess.run(
      createDestCMD,
      stdout=subprocess.PIPE,
      stderr=subprocess.PIPE,
      shell=True,
      universal_newlines=True,
    )

    if process.returncode != 0:
      self.log.error("Destination could not be created")
      if process.stderr:
        self.log.error(process.stderr)
      return False

    self.log.debug(process.stdout)
    self.log.info("Destination created successfully")
    return True

  # login and connect to REST API

  def loginAndConnectRESTAPI(self):
    """
    Login to the node, create target-id, create destination
    Log whether a connection could be established
    Called in TEST_GNMIC.py
    Returns: True if successful, False if unsuccessful
    """
    self.log.info(f"Login and connect {self.device.name} with REST API")
    
    if RESTAPI.login(self) and RESTAPI.createTargetID(self) and RESTAPI.createDestination(self) :
      self.log.info(f"Connection established on {self.device.name}")
      return True
    
    self.log.info(f"Couldn't establish a connection on {self.device.name}.")
    return False
    
  
