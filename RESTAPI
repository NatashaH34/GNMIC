import subprocess
import socket
from infra.GNMIC.GNMIC import GNMIC

class RESTAPI:
    """
    REST API handle
    Supports logging into the node and connecting to the node
    """

    def __init__(self, session:GNMIC):
        self.device = session.device
        self.username = session.username
        self.password = session.password
        self.target_id = ""  # this is initialized in create_target_id()
        self.rest_tool = "/opt/tools/swtools/6500/nbitools/testrest"

    def parse_output(
        self,
        command:str,
        success_msg:str,
        error_msg:str
    ):
        """
        Executes a command, parses status information, logs output
        Returns: Command output if successful, None if unsuccessful
        Args:
            - command: command to execute
            - success_msg: will be logged in case of success
            - error_msg: will be logged in case of error
        """
        process = subprocess.run(
            command,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            shell=True,
            universal_newlines=True,
        )

        self.device.log.debug(process.stdout)
        self.device.log.info(f"stderr: {process.stderr}")
        if process.stderr:
            self.device.log.error(process.stderr)
            self.device.log.error(error_msg)
            return process.stderr

        self.device.log.info(success_msg)
        return process.stdout

    # Login to the node

    def login(self):
        """
        Login to the node from collector
        Parses status information and logs output
        Returns: True if successful, False if unsuccessful
        """
        output = self.parse_output(
            command=f"{self.rest_tool} login {self.device.sp_ip_address}",   # support for login credentials other than "ADMIN" "ADMIN" has not been added yet
            success_msg="Login successful",
            error_msg="Login unsuccessful"
        )
        self.device.log.info(f"output: \"{output}\"")
        if "NOERROR" in output:
            return True
        else:
            return False

    # Config on the node:

    def create_target_id(
        self,
        target_id:str="target_id_project_alpha",
        custom_id:str="TARGET_ID_PROJECT_ALPHA"
    ):
        """
        Creates a target-id of custom type
        Parses status information and logs output
        Returns: True if successful, False if unsuccessful
        Args:
            target_id: defaults to "target_id_project_alpha"
            custom_id: defaults to "TARGET_ID_PROJECT_ALPHA"
        """

        self.target_id = target_id

        output = self.parse_output(
            command=f"{self.rest_tool} put api/v1/datastore/grpc-tunnel/target-id/{self.target_id} '{{\"components\":[\"custom\"],\"custom\":\"{custom_id}\"}}'",
            success_msg="Target-id was created successfully",
            error_msg="Target-id could not be created"
        )
        self.device.log.info(f"output: \"{output}\"")
        if "NOERROR" in output:
            return True
        elif "405" in output:
            self.device.log.info("Warning: An error occured with REST API. This step will pass anyway.")
            return True
        else:
            return False

    def create_destination(
        self,
        address:str="50066",
        description:str="Dialout1",
        admin_state:str="enable",
        tunnel_secure:str="false",
        secure_service:str="true"
    ):
        """
        Uses the target-id to create a destination
        Parses status information and logs output
        Returns: True if successful, False if unsuccessful
        Args:
            address: port number
            description: can be anything
            admin_state: enable or disable
            tunnel_secure: true or false
            secure_service: true or false
        """

        output = self.parse_output(
            command=f"{self.rest_tool} put api/v1/datastore/grpc-tunnel/destination/{socket.gethostbyname(socket.gethostname())},{address}/ '{{\"address\":\"{socket.gethostbyname(socket.gethostname())}\",\"port\":\"{address}\",\"description\":\"{description}\",\"admin-state\":\"{admin_state}\",\"secure-tunnel\":\"{tunnel_secure}\",\"handler\":[{{\"target-id\":\"{self.target_id}\",\"target-type\":\"GNMI_GNOI\",\"secure-service\":\"{secure_service}\"}}]}}'",
            success_msg="Destination was created successfully",
            error_msg="Destination could not be created"
        )
        self.device.log.info(f"output: \"{output}\"")
        if "NOERROR" in output:
            return True
        elif "405" in output:
            self.device.log.info("Warning: There is an error but this step will pass anyway")
            return True
        else:
            return False




    # Get grpcTunnel data:
    def get_grpc_tunnels(self):
        """
        Gets the grpcTunnel data
        Returns:
            - grpcTunnel data string if successful
            - None if unsuccessful
        """
        output = self.parse_output(
            command=f"{self.rest_tool} get api/v1/datastore/grpc-tunnel/ | jq .",
            success_msg="GRPC tunnel data was retrieved successfully",
            error_msg="GRPC tunnel data could not be retrieved"
        )

        if "ciena-pro-grpc-tunnel" not in output:
            return False
        elif "enable" in output:
            self.device.log.info("Status is enabled")

        return True

