import subprocess
import socket

SUCCESS = "NOERROR"


class RESTAPI:
    """
    REST API handle
    Supports logging into the node and connecting to the node
    """

    # Login to the node

    def __init__(self, device):
        self.device = device
        self.target_id = ""
        self.rest_tool = "/opt/tools/swtools/6500/nbitools/testrest"

    def parse_output(
          self,
          command,
          success_msg,
          error_msg
    ):
        process = subprocess.run(
            command,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            shell=True,
            universal_newlines=True,
        )

        self.device.log.debug(process.stdout)

        if SUCCESS not in process.stdout:
            self.device.log.error(error_msg)
            if process.stderr:
                self.device.log.error(process.stderr)
            return False

        self.device.log.info(success_msg)
        return True

    def login(self):
        """
        Login to the node from collector
        Parse status information and log output
        Returns: True if successful, False if unsuccessful
        """
        return self.parse_output(
            f"/opt/tools/swtools/6500/nbitools/testrest login {self.device.sp_ip_address}",
            "Login successful",
            "Login unsuccessful"
        )

    # Config on the node:

    def create_target_id(
        self,
        target_id="target_id_project_alpha",
        custom_id="TARGET_ID_PROJECT_ALPHA"
    ):
        """
        Create a target-id of custom type
        Parse status information and log output
        Returns: True if successful, False if unsuccessful
        Args:
            target_id: defaults to "target_id_project_alpha" (string)
            custom_id: defaults to "TARGET_ID_PROJECT_ALPHA" (string)
        """

        self.target_id = target_id

        return self.parse_output(
            f"{self.rest_tool} put api/v1/datastore/grpc-tunnel/target-id/{self.target_id} '{{\"components\":[\"custom\"],\"custom\":{custom_id}}}\'",
            "Target-id created successfully",
            "Target-id could not be created"
        )

    def create_destination(
        self,
        address="50066",
        description="Dialout1",
        admin_state="enable",
        tunnel_secure="false",
        secure_service="true"
    ):
        """
        Use the target-id to create a destination
        Parse status information and log output
        Returns: True if successful, False if unsuccessful
        Args:
            address: port number (string)
            description: anything (string)
            admin_state: either enable or disable (string)
            tunnel_secure: true or false (string)
            secure_service: true or false (string)
        """

        return self.parse_output(
            f"{self.rest_tool} put api/v1/datastore/grpc-tunnel/destination/{socket.gethostbyname(socket.gethostname())},{address}/ '{{\"address\":{socket.gethostbyname(socket.gethostname())},port\":{address},\"description\":{description},\"admin-state\":{admin_state},\"secure-tunnel\":{tunnel_secure},\"handler\":[{{\"target-id\":{self.target_id},\"target-type\":\"GNMI_GNOI\",\"secure-service\":{secure_service}}}]}}'",
            "Destination was created successfully",
            "Destination could not be created"
        )

